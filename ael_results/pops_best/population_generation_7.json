{
     "algorithm": "",
     "code": "import numpy as np\n\ndef get_aug_type(aug_weight, ACCs, History_ACCs, lats_chose_matix, lats_chose_exts, epoch):\n    cls_num, num_aug_type = History_ACCs.shape\n    \n    perf_improvements = (ACCs - History_ACCs.mean(axis=1)) / History_ACCs.mean(axis=1)\n    chosen_indices = np.argsort(perf_improvements)[::-1]\n    \n    chose_matrix = np.zeros((cls_num, num_aug_type), dtype=bool)\n    chose_exts = np.zeros((cls_num, num_aug_type))\n    \n    for idx, cidx in enumerate(chosen_indices):\n        for i in range(num_aug_type):\n            if lats_chose_matix[cidx, i]:\n                if np.random.rand() < aug_weight[cidx, i] * lats_chose_exts[cidx, i]:\n                    chose_matrix[cidx, i] = True\n                    chose_exts[cidx, i] = lats_chose_exts[cidx, i]\n                break\n    \n    return chose_matrix,chose_exts",
     "objective": 9.68542,
     "other_inf": null
}